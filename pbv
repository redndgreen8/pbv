#!/usr/bin/env python


import os
import sys
import argparse
import subprocess
DIR = os.path.dirname( os.path.realpath(__file__) )
CWD = os.getcwd()


parser = argparse.ArgumentParser(description="",
usage="""pbv [<args>]
Produces VCF output of duplications in reference genome from insertions found in assembly of genome.
""")

parser.add_argument("--asm", help="assembly fasta",required=True)
parser.add_argument("--ref", help="reference fasta",required=True)
parser.add_argument("--minL", help="min insertion length", default=5000, type=int)
parser.add_argument("--t", help="Threads available", default=1, type=int)
parser.add_argument("--subread", help="[1|0], Needs subread filtering or not.(clr Vs ccs)" ,default=0)
parser.add_argument("--mq", help="Min MapQ for reads", default=10)
parser.add_argument("--outdir", help="Output directory",default=".")
#    parser.add_argument("--configfile", help="provide config json ")
parser.add_argument("--scr",  help="Scripts DIR",default="." )
parser.add_argument("--temp", help="temp directory", default="/tmp")



SMK = f"{DIR}/pbv.smk"

args = parser.parse_args()


if int(args.subread) == 0:
    rt="-CCS"
elif int(args.subread) == 1:
    rt="-CLR"


SCR = f"{args.scr}"

cmd=f'''snakemake -n -p -k -j {args.t} -s {SMK} \
'''

# add configuration options from argparse
cmd += " --config "
for arg in vars(args):
    val = getattr(args, arg)
    cmd += f'{arg}={val} '
cmd+= f'mp={rt}'

# execute snakemake
sys.stderr.write(cmd+"\n")
#print(DIR,CWD)
subprocess.call(cmd, shell=True)
